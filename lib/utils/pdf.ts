import { VerificationReport } from "@/lib/types/report";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";

export async function generatePDF(report: VerificationReport): Promise<void> {
  try {
    // Create PDF with A4 dimensions
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    // PDF dimensions
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    const margin = 15; // Reduced margin

    // Add header
    pdf.setFontSize(20);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Verification Report', margin, margin);
    
    pdf.setFontSize(11);
    pdf.text(`Tracking ID: ${report.trackingId}`, margin, margin + 10);
    pdf.text(`Generated: ${new Date(report.generatedAt).toLocaleString()}`, margin, margin + 15);
    pdf.text(`Status: ${report.status}`, margin, margin + 20);

    let currentY = margin + 25;

    // Get report sections
    const reportElement = document.querySelector('.verification-report');
    if (!reportElement) throw new Error('Report element not found');

    const sections = Array.from(reportElement.children);

    // Convert and add each section
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i] as HTMLElement;
      
      // Skip if section is empty or hidden
      if (!section.offsetHeight) continue;

      const canvas = await html2canvas(section, {
        scale: 2,
        useCORS: true,
        logging: false,
        windowWidth: section.scrollWidth,
        windowHeight: section.scrollHeight,
      });

      // Calculate dimensions to fit within page width
      const imgWidth = pdfWidth - (2 * margin);
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      // Check if we need to add a new page
      if (currentY + imgHeight > pdfHeight - margin) {
        pdf.addPage();
        currentY = margin;
      }

      // Add image to PDF
      const imgData = canvas.toDataURL('image/jpeg', 1.0);
      pdf.addImage(imgData, 'JPEG', margin, currentY, imgWidth, imgHeight);
      currentY += imgHeight + 5; // Reduced spacing between sections
    }

    // Add footer to each page
    const totalPages = pdf.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(9);
      pdf.setTextColor(128);
      
      // Add page number
      pdf.text(
        `Page ${i} of ${totalPages}`,
        pdfWidth - margin - 20,
        pdfHeight - margin
      );

      // Add footer text
      pdf.text(
        'Generated by InstantVerify.in',
        margin,
        pdfHeight - margin
      );
    }

    // Add metadata
    pdf.setProperties({
      title: `Verification Report - ${report.trackingId}`,
      subject: 'Background Verification Report',
      author: 'InstantVerify.in',
      keywords: 'verification, background check',
      creator: 'InstantVerify.in',
    });

    // Download the PDF
    pdf.save(`verification-report-${report.trackingId}.pdf`);
  } catch (error) {
    console.error('PDF generation failed:', error);
    throw error;
  }
}